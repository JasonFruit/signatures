#!/usr/bin/env python

from __future__ import print_function

"""A simple tool to make separate PDF files for each bindable
signature of a PDF book. Relies on pdfinfo and pdfbook, the first of
which is a standalone tool and the second of which is a part of many
LaTeX distributions."""

import os
import subprocess
import argparse

# optional arguments
parser = argparse.ArgumentParser(description="A tool to generate bindable signatures from a PDF document")
parser.add_argument("--start", "-s",
                    help="the first page of the source document to process (default 1)",
                    required=False)
parser.add_argument("--end", "-e",
                    help="the final page of the source document to process (default last page)",
                    required=False)
parser.add_argument("--pages", "-p",
                    help="the number of source-document pages per signature (default 16)",
                    required=False)
parser.add_argument("--size", "-z",
                    help="the size of the signature sheets, e.g. A4, letter (default letter)",
                    required=False)

# required positional arguments
parser.add_argument("infile",
                    help="the PDF file to process")
parser.add_argument("outdir",
                    help="the directory to which to write the output files")

args = parser.parse_args()

# read the positional args
infile = args.infile
outdir = args.outdir

# use pdfinfo to find out how many pages are in the infile
info = subprocess.check_output(['pdfinfo', infile]).decode("utf-8")
info = info.split("\n")
end = [line.split(" ")[-1]
       for line in info
       if line.startswith("Pages")][0]

# apply default values to optional args
start = int(args.start if args.start else "1")
end = int(args.end if args.end else end)
pages = int(args.pages if args.pages else "16")
size = args.size if args.size else "letter"

infile_name = os.path.split(infile)[-1]
infile_base_name = ".".join(infile_name.split(".")[:-1])

# ensure the output directory exists
if not os.path.exists(outdir):
    os.mkdir(outdir)

sig_start = start

# make signatures until you're out of pages
while sig_start <= end:
    
    sig_end = sig_start + pages - 1

    # don't go past the end of the input PDF
    if sig_end > end:
        sig_end = end

    # build a suitable output filename for each signature
    outfile = os.path.join(outdir,
                           "%s-%d-to-%d.pdf" % (infile_base_name,
                                                sig_start,
                                                sig_end))
    
    # use pdftk to extract the signatures into separate files
    subprocess.run(["pdftk",
                    infile,
                    "shuffle",
                    "%d-%d" % (sig_start, sig_end),
                    "output",
                    outfile])

    # use pdfbook to rearrange the pages for printing (-q is an
    # undocumented "quiet" option, apparently)
    os.system("cat %s | pdfbook -q --paper %s -o %s" % (outfile,
                                                        size,
                                                        outfile))
    # next signature
    sig_start = sig_end + 1
